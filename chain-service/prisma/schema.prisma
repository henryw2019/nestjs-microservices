generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  images    String[]
  createdBy String    @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  deletedBy String?   @map("deleted_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  isDeleted Boolean   @default(false) @map("is_deleted")

  @@map("posts")
}

model Block {
  number    BigInt  @id
  hash      String
  timestamp DateTime

  txs            Tx[]
  erc20Transfers ERC20Transfer[]
  eventLogs      EventLog[]
}

model Tx {
  hash        String  @id
  blockNumber BigInt
  from        String
  to          String?
  value       Decimal

  block        Block           @relation(fields: [blockNumber], references: [number])
  transfers    ERC20Transfer[]
  eventLogs    EventLog[]
}

model ERC20Transfer {
  id          BigInt  @id @default(autoincrement())
  txHash      String
  logIndex    Int
  blockNumber BigInt
  token       String
  from        String
  to          String
  value       Decimal

  tx    Tx    @relation(fields: [txHash], references: [hash])
  block Block @relation(fields: [blockNumber], references: [number])
}

model EventLog {
  id              BigInt  @id @default(autoincrement())
  chainId         Int
  blockNumber     BigInt
  blockHash       String
  txHash          String
  logIndex        Int
  contractAddress String
  eventName       String
  eventSignature  String
  indexedArgs     Json
  dataArgs        Json
  raw             Json
  processed       Boolean @default(false)

  tx    Tx    @relation(fields: [txHash], references: [hash])
  block Block @relation(fields: [blockNumber], references: [number])
}

model AddressBalance {
  id            BigInt  @id @default(autoincrement())
  address       String
  tokenAddress  String?
  balance       Decimal
  lastUpdatedAt DateTime @default(now())
}

model TokenMeta {
  tokenAddress  String   @id
  name          String?
  symbol        String?
  decimals      Int?
  totalSupply   Decimal?
  lastUpdatedAt DateTime @default(now())
}

model Checkpoint {
  id                 Int    @id @default(1)
  chainId            Int
  lastProcessedBlock BigInt
}

model KeyStore {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  address    String   @unique
  privateKey String
  createdAt  DateTime @default(now())

  @@map("keystore")
}

model Contract {
  id        String   @id @default(uuid())
  name      String
  address   String
  abiFile   String   @map("abi_file")
  ownerId   String?  @map("owner_id")
  createdAt DateTime @default(now())

  @@map("contracts")
}
